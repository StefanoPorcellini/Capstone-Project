// <auto-generated />
using System;
using GestioneOrdini.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestioneOrdini.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20240920084709_Update_Order_Table")]
    partial class Update_Order_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestioneOrdini.Model.Clients.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("Items");

                    b.HasDiscriminator().HasValue("Item");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.LaserStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("LaserStandards");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MaxDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.PlotterStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("PlotterStandards");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("GestioneOrdini.Model.PriceList.LaserPriceList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("LaserPriceLists");
                });

            modelBuilder.Entity("GestioneOrdini.Model.User.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GestioneOrdini.Model.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LaserItemLaserPriceList", b =>
                {
                    b.Property<int>("LaserItemsId")
                        .HasColumnType("int");

                    b.Property<int>("LaserPriceListsId")
                        .HasColumnType("int");

                    b.HasKey("LaserItemsId", "LaserPriceListsId");

                    b.HasIndex("LaserPriceListsId");

                    b.ToTable("LaserItemLaserPriceList");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.LaserItem", b =>
                {
                    b.HasBaseType("GestioneOrdini.Model.Order.Item");

                    b.Property<string>("CustomDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit");

                    b.Property<int?>("LaserStandardId")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("LaserStandardId");

                    b.HasDiscriminator().HasValue("LaserItem");
                });

            modelBuilder.Entity("PlotterItem", b =>
                {
                    b.HasBaseType("GestioneOrdini.Model.Order.Item");

                    b.Property<double?>("Base")
                        .HasColumnType("float");

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit");

                    b.Property<int?>("PlotterStandardId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PricePerSquareMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("PlotterStandardId");

                    b.ToTable("Items", t =>
                        {
                            t.Property("IsCustom")
                                .HasColumnName("PlotterItem_IsCustom");

                            t.Property("Quantity")
                                .HasColumnName("PlotterItem_Quantity");
                        });

                    b.HasDiscriminator().HasValue("PlotterItem");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.Item", b =>
                {
                    b.HasOne("GestioneOrdini.Model.Order.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestioneOrdini.Model.Order.WorkType", "Type")
                        .WithMany("Items")
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.Order", b =>
                {
                    b.HasOne("GestioneOrdini.Model.Clients.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestioneOrdini.Model.Order.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GestioneOrdini.Model.User.User", b =>
                {
                    b.HasOne("GestioneOrdini.Model.User.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LaserItemLaserPriceList", b =>
                {
                    b.HasOne("GestioneOrdini.Model.Order.LaserItem", null)
                        .WithMany()
                        .HasForeignKey("LaserItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestioneOrdini.Model.PriceList.LaserPriceList", null)
                        .WithMany()
                        .HasForeignKey("LaserPriceListsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.LaserItem", b =>
                {
                    b.HasOne("GestioneOrdini.Model.Order.LaserStandard", "LaserStandard")
                        .WithMany("LaserItems")
                        .HasForeignKey("LaserStandardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LaserStandard");
                });

            modelBuilder.Entity("PlotterItem", b =>
                {
                    b.HasOne("GestioneOrdini.Model.Order.PlotterStandard", "PlotterStandard")
                        .WithMany("PlotterItems")
                        .HasForeignKey("PlotterStandardId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PlotterStandard");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Clients.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.LaserStandard", b =>
                {
                    b.Navigation("LaserItems");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.PlotterStandard", b =>
                {
                    b.Navigation("PlotterItems");
                });

            modelBuilder.Entity("GestioneOrdini.Model.Order.WorkType", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
